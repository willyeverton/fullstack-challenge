version: '3.3'

services:
  # Frontend (React)
  frontend:
    build:
      context: ./frontend
    dns:
      - 8.8.8.8
      - 8.8.4.4
    ports:
      - "${FRONTEND_PORT:-8000}:80"
    depends_on:
      - user-service
      - enrichment-service
    networks:
      - app-network
    environment:
      - VITE_API_BASE_URL=${VITE_API_BASE_URL}
      - VITE_ENRICHMENT_API_URL=${VITE_ENRICHMENT_API_URL}
    volumes:
      - ./frontend:/app
      - /app/node_modules
    env_file:
      - .env

  # User Service (PHP/Lumen)
  user-service:
    build:
      context: ./services/user-service-php
    dns:
      - 8.8.8.8
      - 8.8.4.4
    environment:
      - APP_ENV=${APP_ENV}
      - APP_DEBUG=${APP_DEBUG}
      - DB_CONNECTION=${DB_CONNECTION}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_DATABASE=${DB_DATABASE}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - RABBITMQ_URL=${RABBITMQ_URL}
      - RABBITMQ_QUEUE=${RABBITMQ_QUEUE}
      - RABBITMQ_DLX=${RABBITMQ_DLX}
      - RABBITMQ_DLQ=${RABBITMQ_DLQ}
      - RABBITMQ_RETRY_DELAY=${RABBITMQ_RETRY_DELAY}
      - RABBITMQ_RETRY_ATTEMPTS=${RABBITMQ_RETRY_ATTEMPTS}
    ports:
      - "${USER_SERVICE_PORT:-8080}:8000"
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    volumes:
      - ./services/user-service-php:/var/www
    env_file:
      - .env

  # Enrichment Service (Node.js/NestJS)
  enrichment-service:
    build:
      context: ./services/enrichment-service-node
    dns:
      - 8.8.8.8
      - 8.8.4.4
    environment:
      - NODE_ENV=${NODE_ENV}
      - PORT=${PORT}
      - MONGODB_URI=${MONGODB_URI}
      - RABBITMQ_URL=${RABBITMQ_URL}
      - RABBITMQ_QUEUE=${RABBITMQ_QUEUE}
      - RABBITMQ_DLX=${RABBITMQ_DLX}
      - RABBITMQ_DLQ=${RABBITMQ_DLQ}
      - RABBITMQ_RETRY_DELAY=${RABBITMQ_RETRY_DELAY}
      - RABBITMQ_RETRY_ATTEMPTS=${RABBITMQ_RETRY_ATTEMPTS}
    ports:
      - "${ENRICHMENT_SERVICE_PORT:-3000}:3000"
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    env_file:
      - .env
    volumes:
      - ./services/enrichment-service-node:/app
      - /app/node_modules

  # PostgreSQL
  postgres:
    image: postgres:13-alpine
    environment:
      - POSTGRES_DB=user_service
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d user_service"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # MongoDB
  mongodb:
    image: mongo:5-focal
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # RabbitMQ
  rabbitmq:
    image: rabbitmq:3-management-alpine
    ports:
      - "5672:5672" # AMQP
      - "15672:15672" # Management UI
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

volumes:
  postgres_data:
  mongodb_data:
  rabbitmq_data:


networks:
  app-network:
    driver: bridge
