name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint-and-test-frontend:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        run: |
          cd frontend
          npm ci
      
      - name: Lint code
        run: |
          cd frontend
          npm run lint
      
      - name: Run tests
        run: |
          cd frontend
          npm test
      
      - name: Build
        run: |
          cd frontend
          npm run build

  lint-and-test-enrichment-service:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: services/enrichment-service-node/package-lock.json
      
      - name: Install dependencies
        run: |
          cd services/enrichment-service-node
          npm ci
      
      - name: Lint code
        run: |
          cd services/enrichment-service-node
          npm run lint
      
      - name: Run tests
        run: |
          cd services/enrichment-service-node
          npm test

  lint-and-test-user-service:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          extensions: mbstring, pdo, pdo_mysql, intl, zip
          coverage: none
      
      - name: Install dependencies
        run: |
          cd services/user-service-php
          composer install --prefer-dist --no-progress
      
      - name: Run tests
        run: |
          cd services/user-service-php
          ./vendor/bin/phpunit

  integration-tests:
    runs-on: ubuntu-latest
    needs: [lint-and-test-frontend, lint-and-test-enrichment-service, lint-and-test-user-service]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    services:
      postgres:
        image: postgres:13-alpine
        env:
          POSTGRES_DB: users_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      mongodb:
        image: mongo:5-focal
        ports:
          - 27017:27017
      
      rabbitmq:
        image: rabbitmq:3-management-alpine
        ports:
          - 5672:5672
          - 15672:15672
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Run integration tests
        run: |
          cd tests/integration
          npm install
          npm test
        env:
          USER_SERVICE_URL: http://localhost:8080/api
          ENRICHMENT_SERVICE_URL: http://localhost:3000
          RABBITMQ_URI: amqp://localhost:5672
          MONGODB_URI: mongodb://localhost:27017/enrichment_test

  build-and-push-docker-images:
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      
      - name: Build and push Frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/fullstack-challenge-frontend:latest
      
      - name: Build and push User Service image
        uses: docker/build-push-action@v5
        with:
          context: ./services/user-service-php
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/fullstack-challenge-user-service:latest
      
      - name: Build and push Enrichment Service image
        uses: docker/build-push-action@v5
        with:
          context: ./services/enrichment-service-node
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/fullstack-challenge-enrichment-service:latest

  deploy:
    runs-on: ubuntu-latest
    needs: [build-and-push-docker-images]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Aqui você pode adicionar comandos para fazer o deploy em um ambiente de produção
          # Por exemplo, usando SSH para acessar o servidor e atualizar os containers
          # ou utilizando uma plataforma de orquestração como Kubernetes 